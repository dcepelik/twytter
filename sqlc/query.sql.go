// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package sqlc

import (
	"context"
)

const getTwytts = `-- name: GetTwytts :many
SELECT id, name, twytt FROM twytts
`

func (q *Queries) GetTwytts(ctx context.Context) ([]Twytt, error) {
	rows, err := q.db.QueryContext(ctx, getTwytts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Twytt
	for rows.Next() {
		var i Twytt
		if err := rows.Scan(&i.ID, &i.Name, &i.Twytt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTwytt = `-- name: InsertTwytt :one
INSERT INTO twytts (
	name,
	twytt
)
VALUES (
	$1,
	$2
)
RETURNING id, name, twytt
`

type InsertTwyttParams struct {
	Name  string
	Twytt string
}

func (q *Queries) InsertTwytt(ctx context.Context, arg InsertTwyttParams) (Twytt, error) {
	row := q.db.QueryRowContext(ctx, insertTwytt, arg.Name, arg.Twytt)
	var i Twytt
	err := row.Scan(&i.ID, &i.Name, &i.Twytt)
	return i, err
}
